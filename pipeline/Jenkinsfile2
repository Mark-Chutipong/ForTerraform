pipeline {
    agent {
        docker { 
            image 'hashicorp/terraform:1.7'
            args "--entrypoint=''"
        }
    }
    parameters {
        choice(name: 'ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Select Action')
    }
    environment {
        TF_VARS = "tfvars/mark2.tfvars"
        //BACKEND = "backend/backend2.tf"
        //BACKEND = "backend.tf"
        WORKSPACE = "Test2"
        
    }
    stages {
        stage('Prepare secrets') {
            steps {
                withCredentials([
                usernamePassword(credentialsId: 'jeknins_credential', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh '''
                export CRED_FILE=${WORKSPACE}/credentials/profile
                sed -i 's|__AWS_ACCESS_KEY_ID__|'${AWS_ACCESS_KEY_ID}'|g' ${CRED_FILE}
                sed -i 's|__AWS_SECRET_ACCESS_KEY__|'${AWS_SECRET_ACCESS_KEY}'|g' ${CRED_FILE}
                '''
                }
            }
        }
        stage('Init') {
            steps {
                //sh 'terraform init -backend-config=${BACKEND}'
                sh 'terraform init'
                //sh 'terraform workspace select -or-create ${WORKSPACE}'
            }
        }
        stage('Plan') {
            when {
                expression { params.ACTION == 'plan'}
            }
            steps {
                echo "ACTION : ${params.ACTION}"
                sh 'terraform plan -var-file=${TF_VARS}'
            }
        }
        stage('Approval') {
            when {
                expression { params.ACTION == 'apply'}
            }
            steps {
                echo "ACTION : ${params.ACTION}"
                timeout(time: 3, unit: "MINUTES") {
                    input message: 'Do you want to approve the deployment?', ok: 'Yes'
                }
                sh 'terraform apply -var-file=${TF_VARS} -auto-approve'
            }
        }
        stage('Destroy') {
            when {
                expression { params.ACTION == 'destroy'}
            }
            steps {
                echo "ACTION : ${params.ACTION}"
                sh 'terraform destroy -var-file=${TF_VARS} -auto-approve'
            }
        }
    }
    post {
        success {
            echo "Release Success"
        }
        failure {
            echo "Release Failed"
        }
        cleanup {
            echo "Clean up in post work space"
            cleanWs()
        }
    }
}
